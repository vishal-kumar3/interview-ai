// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  username      String?   @unique
  name          String?
  password      String?
  image         String?
  role          UserRole  @default(USER)

  accounts          Account[]
  resumes           Resume[]
  jobDescriptions   JobDescription[]
  interviewSessions InterviewSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Resume {
  id                String             @id @default(uuid())
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  fileName          String
  fileUrl           String?
  parsedData        Json
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  interviewSessions InterviewSession[]
}

model JobDescription {
  id                String             @id @default(uuid())
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  title             String
  company           String?
  parsedData        Json
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  interviewSessions InterviewSession[]
}

enum InterviewType {
  TECHNICAL
  BEHAVIORAL
  SITUATIONAL
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum InterviewStatus {
  STARTED
  COMPLETED
  ABANDONED
}

model InterviewSession {
  id               String          @id @default(uuid())
  userId           String
  user             User            @relation(fields: [userId], references: [id])
  resumeId         String?
  resume           Resume?         @relation(fields: [resumeId], references: [id])
  jobDescriptionId String?
  jobDescription   JobDescription? @relation(fields: [jobDescriptionId], references: [id])
  interviewType    InterviewType   @default(TECHNICAL)
  difficulty       Difficulty
  status           InterviewStatus @default(STARTED)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  questions        Question[]
  responses        Response[]
}

model Question {
  id        String           @id @default(uuid())
  sessionId String
  session   InterviewSession @relation(fields: [sessionId], references: [id])
  text      String
  type      InterviewType
  order     Int
  createdAt DateTime         @default(now())
  response  Response?
}

model Response {
  id           String           @id @default(uuid())
  questionId   String           @unique
  question     Question         @relation(fields: [questionId], references: [id])
  sessionId    String
  session      InterviewSession @relation(fields: [sessionId], references: [id])
  responseType String
  content      String?
  fileUrl      String?
  createdAt    DateTime         @default(now())
  feedback     Feedback?
}

model Feedback {
  id         String   @id @default(uuid())
  responseId String   @unique
  response   Response @relation(fields: [responseId], references: [id])
  content    String
  score      Int?
  createdAt  DateTime @default(now())
}
